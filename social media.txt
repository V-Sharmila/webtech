project-root/
├── config/
│   └── database.js      # Database configuration with Sequelize
├── models/
│   ├── index.js         # Sequelize models loader
│   ├── user.js          # User model
│   ├── post.js          # Post model
│   └── friendship.js    # Friendship model
├── controllers/
│   ├── postController.js       # Controller for post-related actions
│   ├── userController.js       # Controller for user-related actions
│   └── friendshipController.js # Controller for friendship-related actions
├── routes/
│   ├── postRoutes.js           # Routes for post operations
│   ├── userRoutes.js           # Routes for user operations
│   └── friendshipRoutes.js     # Routes for friendship operations
├── db.sqlite              # SQLite database file
├── server.js              # Main server entry point
└── package.json           # Dependencies and scripts

config/database.js:
const { Sequelize } = require('sequelize');

const sequelize = new Sequelize({
    dialect: 'sqlite',
    storage: 'db.sqlite' // SQLite file for storage
});

module.exports = sequelize;

models/user.js:
const { DataTypes } = require('sequelize');
const sequelize = require('../config/database');

const User = sequelize.define('User', {
    username: {
        type: DataTypes.STRING,
        allowNull: false,
        unique: true
    }
});

module.exports = User;

models/post.js:
const { DataTypes } = require('sequelize');
const sequelize = require('../config/database');

const Post = sequelize.define('Post', {
    content: {
        type: DataTypes.TEXT,
        allowNull: false
    }
});

Post.associate = (models) => {
    Post.belongsTo(models.User, { foreignKey: 'userId' });
};

module.exports = Post;

models/friendship.js:
const { DataTypes } = require('sequelize');
const sequelize = require('../config/database');

const Friendship = sequelize.define('Friendship', {
    followerId: {
        type: DataTypes.INTEGER,
        allowNull: false
    },
    followedId: {
        type: DataTypes.INTEGER,
        allowNull: false
    }
});

Friendship.associate = (models) => {
    Friendship.belongsTo(models.User, { as: 'Follower', foreignKey: 'followerId' });
    Friendship.belongsTo(models.User, { as: 'Followed', foreignKey: 'followedId' });
};

module.exports = Friendship;


models/index.js:
const sequelize = require('../config/database');
const User = require('./user');
const Post = require('./post');
const Friendship = require('./friendship');

// Define associations
User.hasMany(Post, { foreignKey: 'userId' });
Post.belongsTo(User, { foreignKey: 'userId' });

User.belongsToMany(User, { as: 'Followers', through: Friendship, foreignKey: 'followedId' });
User.belongsToMany(User, { as: 'Following', through: Friendship, foreignKey: 'followerId' });

const db = { sequelize, User, Post, Friendship };

module.exports = db;

controllers/postController.js:
const { Post, User } = require('../models');

exports.createPost = async (req, res) => {
    try {
        const post = await Post.create(req.body);
        res.status(201).json(post);
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
};

// Additional methods for update, delete, and fetch posts...

controllers/userController.js:
const { User } = require('../models');

exports.createUser = async (req, res) => {
    try {
        const user = await User.create(req.body);
        res.status(201).json(user);
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
};

// Additional methods for fetching users...

controllers/friendshipController.js:
const { Friendship } = require('../models');

exports.createFriendship = async (req, res) => {
    try {
        const friendship = await Friendship.create(req.body);
        res.status(201).json(friendship);
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
};

// Additional methods for managing friendships...

routes/postRoutes.js:
const express = require('express');
const postController = require('../controllers/postController');

const router = express.Router();

router.post('/', postController.createPost);
// Other routes for updating, deleting, fetching posts

module.exports = router;

routes/userRoutes.js:
const express = require('express');
const userController = require('../controllers/userController');

const router = express.Router();

router.post('/', userController.createUser);
// Other routes for fetching users

module.exports = router;

routes/friendshipRoutes.js:
const express = require('express');
const friendshipController = require('../controllers/friendshipController');

const router = express.Router();

router.post('/', friendshipController.createFriendship);
// Other routes for managing friendships

module.exports = router;

server.js:
const express = require('express');
const bodyParser = require('body-parser');
const db = require('./models');
const postRoutes = require('./routes/postRoutes');
const userRoutes = require('./routes/userRoutes');
const friendshipRoutes = require('./routes/friendshipRoutes');

const app = express();
const port = 3000;

app.use(bodyParser.json());

// Routes
app.use('/posts', postRoutes);
app.use('/users', userRoutes);
app.use('/friendships', friendshipRoutes);

// Initialize database and start server
db.sequelize.sync().then(() => {
    app.listen(port, () => {
        console.log(`Server running on http://localhost:${port}`);
    });
});



a. Login (POST /login)
URL: http://localhost:3000/login
Method: POST
Headers:
Content-Type: application/json
Body:
json
Copy code
{
  "username": "social_user",
  "password": "password123"
}


b. Create a Post (POST /posts)
URL: http://localhost:3000/posts
Method: POST
Headers:
Authorization: Bearer <your_token_here>
Content-Type: application/json
Body:
json
Copy code
{
  "content": "This is a new post"
}

c. Fetch Posts (GET /posts)
URL: http://localhost:3000/posts
Method: GET
Headers:
Authorization: Bearer <your_token_here>
Description: Fetch all posts (your timeline).

