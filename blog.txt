backend:
blog-app/
├── config/
│   └── config.js           # Sequelize database configuration
├── models/
│   ├── index.js            # Initializes all models and associations
│   ├── Post.js             # Post model
│   ├── Comment.js          # Comment model
│   ├── Category.js         # Category model
│   └── Tag.js              # Tag model
├── routes/
│   ├── posts.js            # Routes related to posts
│   └── comments.js         # Routes related to comments
├── controllers/
│   ├── postController.js   # Controller for post actions
│   └── commentController.js # Controller for comment actions
├── db/
│   └── db_file_name.sqlite # SQLite database file
├── migrations/             # Sequelize migrations folder
├── seeders/                # Sequelize seeders folder
├── app.js                  # Express application setup
└── package.json            # Project dependencies and scripts

config.js:
const { Sequelize } = require('sequelize');

const sequelize = new Sequelize({
    dialect: 'sqlite',
    storage: 'db_file_name.sqlite',
});

module.exports = sequelize;

models/index.js:
const Sequelize = require('sequelize');
const sequelize = require('../config/config');

const Post = require('./Post')(sequelize, Sequelize);
const Comment = require('./Comment')(sequelize, Sequelize);
const Category = require('./Category')(sequelize, Sequelize);
const Tag = require('./Tag')(sequelize, Sequelize);

// Define associations
Category.hasMany(Post, { foreignKey: 'category_id' });
Post.belongsTo(Category, { foreignKey: 'category_id' });

Post.hasMany(Comment, { foreignKey: 'post_id' });
Comment.belongsTo(Post, { foreignKey: 'post_id' });

Post.belongsToMany(Tag, { through: 'post_tags', foreignKey: 'post_id' });
Tag.belongsToMany(Post, { through: 'post_tags', foreignKey: 'tag_id' });

module.exports = { sequelize, Post, Comment, Category, Tag };

models/Post.js:
module.exports = (sequelize, DataTypes) => {
    const Post = sequelize.define('Post', {
        title: { type: DataTypes.STRING, allowNull: false },
        content: { type: DataTypes.TEXT, allowNull: false },
    });
    return Post;
};

models/Comment.js:
module.exports = (sequelize, DataTypes) => {
    const Comment = sequelize.define('Comment', {
        content: { type: DataTypes.TEXT, allowNull: false },
    });
    return Comment;
};

models/Category.js:
module.exports = (sequelize, DataTypes) => {
    const Category = sequelize.define('Category', {
        name: { type: DataTypes.STRING, allowNull: false, unique: true },
    });
    return Category;
};

 models/Tag.js:
module.exports = (sequelize, DataTypes) => {
    const Tag = sequelize.define('Tag', {
        name: { type: DataTypes.STRING, allowNull: false, unique: true },
    });
    return Tag;
};

controllers/postController.js:
const { Post, Category, Tag, Comment } = require('../models');

// Create a blog post
exports.createPost = async (req, res) => {
    try {
        const { title, content, category_id } = req.body;
        const post = await Post.create({ title, content, category_id });
        res.status(201).json({ message: 'Post created', postId: post.id });
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
};

// Fetch all posts with category info
exports.getAllPosts = async (req, res) => {
    try {
        const posts = await Post.findAll({ include: Category });
        res.json(posts);
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
};

controllers/commentController.js:
const { Comment } = require('../models');

// Add a comment to a post
exports.addComment = async (req, res) => {
    try {
        const { postId } = req.params;
        const { content } = req.body;
        const comment = await Comment.create({ post_id: postId, content });
        res.status(201).json({ message: 'Comment added', commentId: comment.id });
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
};

routes/posts.js:
const express = require('express');
const router = express.Router();
const postController = require('../controllers/postController');

router.post('/', postController.createPost);
router.get('/', postController.getAllPosts);

module.exports = router;

routes/comments.js:
const express = require('express');
const router = express.Router();
const commentController = require('../controllers/commentController');

router.post('/:postId/comments', commentController.addComment);

module.exports = router;


app.js:
const express = require('express');
const bodyParser = require('body-parser');
const { sequelize } = require('./models');

const app = express();
const port = 3000;

app.use(bodyParser.json());

const postRoutes = require('./routes/posts');
const commentRoutes = require('./routes/comments');

app.use('/posts', postRoutes);
app.use('/posts', commentRoutes);

// Synchronize database and start server
sequelize.sync().then(() => {
    app.listen(port, () => {
        console.log(`Server is running on http://localhost:${port}`);
    });
});


Frontend:
blog-frontend/
├── public/
│   └── index.html           # Main HTML file
├── src/
│   ├── components/
│   │   ├── PostList.js      # Displays list of all posts
│   │   ├── PostDetail.js    # Displays a single post with comments and add comment form
│   │   ├── AddPost.js       # Form to create a new post
│   ├── services/
│   │   └── api.js           # Axios setup for API calls
│   ├── App.js               # Main App component with routes
│   ├── index.js             # Main entry file
└── package.json             # Project dependencies
under src create index.css(for styling part)

src/services/api.js:

import axios from 'axios';

const api = axios.create({
    baseURL: 'http://localhost:3000', // Your backend API URL
});

export const fetchPosts = () => api.get('/posts');
export const createPost = (postData) => api.post('/posts', postData);
export const fetchComments = (postId) => api.get(`/posts/${postId}/comments`);
export const addComment = (postId, commentData) => api.post(`/posts/${postId}/comments`, commentData);

export default api;

src/App.js:
// src/App.js
import React from 'react';
import { BrowserRouter as Router, Route, Routes } from 'react-router-dom';
import PostList from './components/PostList';
import PostDetail from './components/PostDetail';
import AddPost from './components/AddPost';

function App() {
    return (
        <Router>
            <div className="App">
                <Routes>
                    <Route path="/" element={<PostList />} />
                    <Route path="/posts/:postId" element={<PostDetail />} />
                    <Route path="/add-post" element={<AddPost />} />
                </Routes>
            </div>
        </Router>
    );
}

export default App;


src/components/PostList.js:
// src/components/PostList.js
import React, { useEffect, useState } from 'react';
import { Link } from 'react-router-dom';
import { fetchPosts } from '../services/api';

function PostList() {
    const [posts, setPosts] = useState([]);

    useEffect(() => {
        fetchPosts().then((response) => setPosts(response.data)).catch((error) => console.error(error));
    }, []);

    return (
        <div className="container">
            <h1>Blog Posts</h1>
            <Link to="/add-post">
                <button>Add New Post</button>
            </Link>
            <ul className="post-list">
                {posts.map((post) => (
                    <li key={post.id}>
                        <Link to={`/posts/${post.id}`}>{post.title}</Link>
                    </li>
                ))}
            </ul>
        </div>
    );
}

export default PostList;


src/components/AddPost.js:
// src/components/AddPost.js
import React, { useState } from 'react';
import { createPost } from '../services/api';
import { useNavigate } from 'react-router-dom';

function AddPost() {
    const [title, setTitle] = useState('');
    const [content, setContent] = useState('');
    const [category_id, setCategoryId] = useState('');
    const navigate = useNavigate();

    const handleSubmit = async (e) => {
        e.preventDefault();
        try {
            await createPost({ title, content, category_id });
            navigate('/');
        } catch (error) {
            console.error(error);
        }
    };

    return (
        <div className="container">
            <h2>Add New Post</h2>
            <form onSubmit={handleSubmit}>
                <div>
                    <label>Title</label>
                    <input type="text" value={title} onChange={(e) => setTitle(e.target.value)} required />
                </div>
                <div>
                    <label>Content</label>
                    <textarea value={content} onChange={(e) => setContent(e.target.value)} required />
                </div>
                <div>
                    <label>Category ID</label>
                    <input type="text" value={category_id} onChange={(e) => setCategoryId(e.target.value)} />
                </div>
                <button type="submit">Add Post</button>
            </form>
        </div>
    );
}

export default AddPost;


src/components/PostDetail.js:
// src/components/PostDetail.js
import React, { useEffect, useState } from 'react';
import { useParams } from 'react-router-dom';
import { fetchComments, addComment } from '../services/api';

function PostDetail() {
    const { postId } = useParams();
    const [post, setPost] = useState({});
    const [comments, setComments] = useState([]);
    const [commentContent, setCommentContent] = useState('');

    useEffect(() => {
        // Fetch post details (placeholder here)
        // Fetch comments
        fetchComments(postId).then((response) => setComments(response.data)).catch((error) => console.error(error));
    }, [postId]);

    const handleAddComment = async (e) => {
        e.preventDefault();
        try {
            await addComment(postId, { content: commentContent });
            setCommentContent('');
            fetchComments(postId).then((response) => setComments(response.data));
        } catch (error) {
            console.error(error);
        }
    };

    return (
        <div className="container">
            <h2>{post.title}</h2>
            <p>{post.content}</p>
            <div className="comments">
                <h3>Comments</h3>
                <ul>
                    {comments.map((comment) => (
                        <li key={comment.id} className="comment-item">{comment.content}</li>
                    ))}
                </ul>
                <form onSubmit={handleAddComment}>
                    <textarea
                        value={commentContent}
                        onChange={(e) => setCommentContent(e.target.value)}
                        required
                    />
                    <button type="submit">Add Comment</button>
                </form>
            </div>
        </div>
    );
}

export default PostDetail;
src/index.js:
// src/index.js
import React from 'react';
import ReactDOM from 'react-dom/client';
import App from './App';
import './index.css';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<App />);


public/index.html:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Blog Frontend</title>
</head>
<body>
    <div id="root"></div>
</body>
</html>



src/index.css"

/* src/index.css */

/* Basic Reset */
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

/* General Styling */
body {
    font-family: Arial, sans-serif;
    background-color: #f9f9f9;
    color: #333;
    line-height: 1.6;
}

.container {
    max-width: 800px;
    margin: 20px auto;
    padding: 20px;
    background: #fff;
    border-radius: 8px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
}

/* Header */
h1, h2, h3 {
    color: #333;
    margin-bottom: 1rem;
}

/* Post List Styling */
ul.post-list {
    list-style: none;
    margin: 0;
    padding: 0;
}

ul.post-list li {
    margin-bottom: 1rem;
    padding: 1rem;
    border-bottom: 1px solid #ddd;
}

ul.post-list li a {
    color: #333;
    text-decoration: none;
    font-size: 1.2rem;
    font-weight: bold;
}

ul.post-list li a:hover {
    color: #0073e6;
}

/* Buttons */
button {
    background-color: #0073e6;
    color: #fff;
    border: none;
    padding: 10px 15px;
    border-radius: 5px;
    cursor: pointer;
    font-size: 1rem;
    margin-top: 10px;
}

button:hover {
    background-color: #005bb5;
}

/* Forms */
form {
    display: flex;
    flex-direction: column;
    gap: 10px;
}

input[type="text"],
textarea {
    padding: 10px;
    font-size: 1rem;
    border: 1px solid #ddd;
    border-radius: 5px;
}

textarea {
    resize: vertical;
    min-height: 80px;
}

/* Comments */
.comments {
    margin-top: 2rem;
}

.comments h3 {
    margin-bottom: 1rem;
}

.comment-item {
    padding: 1rem;
    border-bottom: 1px solid #ddd;
}


