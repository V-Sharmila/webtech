project-root/
├── config/
│   └── database.js          # Sequelize configuration with SQLite
├── controllers/
│   ├── authController.js    # Controller for authentication (signup, login)
│   ├── courseController.js  # Controller for course-related actions (add course, fetch courses)
│   └── discussionController.js  # Controller for discussion forum actions (add, fetch discussions)
├── middlewares/
│   └── authMiddleware.js    # Middleware for authentication and token verification
├── models/
│   ├── index.js             # Model index to initialize Sequelize and associate models
│   ├── User.js              # User model definition
│   ├── Course.js            # Course model definition
│   └── Discussion.js        # Discussion model definition
├── routes/
│   ├── authRoutes.js        # Routes for authentication (signup, login)
│   ├── courseRoutes.js      # Routes for course actions (add course, get courses)
│   └── discussionRoutes.js  # Routes for discussion actions (add, get discussions)
├── app.js                   # Main Express server file
└── package.json             # Project dependencies and scripts


config/database.js:
const { Sequelize } = require('sequelize');

const sequelize = new Sequelize({
    dialect: 'sqlite',
    storage: 'db_file_name.sqlite',
});

module.exports = sequelize;

models/User.js:
const { DataTypes } = require('sequelize');
const sequelize = require('../config/database');

const User = sequelize.define('User', {
    username: { type: DataTypes.STRING, unique: true, allowNull: false },
    password: { type: DataTypes.STRING, allowNull: false },
    role: { type: DataTypes.ENUM('student', 'instructor'), allowNull: false },
    email: { type: DataTypes.STRING, unique: true, allowNull: false },
}, { timestamps: true });

module.exports = User;

models/Course.js:
const { DataTypes } = require('sequelize');
const sequelize = require('../config/database');
const User = require('./User');

const Course = sequelize.define('Course', {
    title: { type: DataTypes.STRING, allowNull: false },
    description: { type: DataTypes.TEXT, allowNull: false },
}, { timestamps: true });

Course.belongsTo(User, { foreignKey: 'instructor_id', onDelete: 'CASCADE' });
User.hasMany(Course, { foreignKey: 'instructor_id' });

module.exports = Course;

models/Discussion.js:
const { DataTypes } = require('sequelize');
const sequelize = require('../config/database');
const User = require('./User');
const Course = require('./Course');

const Discussion = sequelize.define('Discussion', {
    content: { type: DataTypes.TEXT, allowNull: false },
}, { timestamps: true });

Discussion.belongsTo(Course, { foreignKey: 'course_id', onDelete: 'CASCADE' });
Discussion.belongsTo(User, { foreignKey: 'user_id', onDelete: 'CASCADE' });

module.exports = Discussion;

models/index.js:
const sequelize = require('../config/database');
const User = require('./User');
const Course = require('./Course');
const Discussion = require('./Discussion');

const initModels = async () => {
    await sequelize.sync({ force: true }); // Set to `false` in production
};

module.exports = { sequelize, initModels, User, Course, Discussion };

middlewares/authMiddleware.js:
const jwt = require('jsonwebtoken');

const authenticate = (req, res, next) => {
    const token = req.header('Authorization');
    if (!token) return res.status(403).json({ error: 'Access denied' });

    jwt.verify(token, 'your_jwt_secret', (err, user) => {
        if (err) return res.status(403).json({ error: 'Invalid token' });
        req.user = user;
        next();
    });
};

module.exports = authenticate;

controllers/authController.js:
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const { User } = require('../models');

exports.signup = async (req, res) => {
    const { username, password, email, role } = req.body;
    const hashedPassword = await bcrypt.hash(password, 10);

    try {
        const user = await User.create({ username, password: hashedPassword, email, role });
        res.status(201).json({ message: 'User created', user_id: user.id });
    } catch (err) {
        res.status(500).json({ error: err.message });
    }
};

exports.login = async (req, res) => {
    const { username, password } = req.body;
    try {
        const user = await User.findOne({ where: { username } });
        if (!user) return res.status(404).json({ error: 'User not found' });

        const validPassword = await bcrypt.compare(password, user.password);
        if (!validPassword) return res.status(400).json({ error: 'Invalid password' });

        const token = jwt.sign({ id: user.id, role: user.role }, 'your_jwt_secret', { expiresIn: '1h' });
        res.json({ message: 'Login successful', token });
    } catch (err) {
        res.status(500).json({ error: err.message });
    }
};

controllers/courseController.js:
const { Course } = require('../models');

exports.createCourse = async (req, res) => {
    const { title, description } = req.body;
    const { id, role } = req.user;

    if (role !== 'instructor') {
        return res.status(403).json({ error: 'Only instructors can add courses' });
    }

    try {
        const course = await Course.create({ title, description, instructor_id: id });
        res.status(201).json({ message: 'Course created', course_id: course.id });
    } catch (err) {
        res.status(500).json({ error: err.message });
    }
};

exports.getCourses = async (req, res) => {
    try {
        const courses = await Course.findAll();
        res.json(courses);
    } catch (err) {
        res.status(500).json({ error: err.message });
    }
};

controllers/discussionController.js:
const { Discussion } = require('../models');

exports.addDiscussion = async (req, res) => {
    const { course_id, content } = req.body;
    const { id } = req.user;

    try {
        const discussion = await Discussion.create({ course_id, user_id: id, content });
        res.status(201).json({ message: 'Discussion added', discussion_id: discussion.id });
    } catch (err) {
        res.status(500).json({ error: err.message });
    }
};

exports.getDiscussions = async (req, res) => {
    const { courseId } = req.params;
    try {
        const discussions = await Discussion.findAll({ where: { course_id: courseId } });
        res.json(discussions);
    } catch (err) {
        res.status(500).json({ error: err.message });
    }
};

routes/authRoutes.js:
const express = require('express');
const router = express.Router();
const authController = require('../controllers/authController');

router.post('/signup', authController.signup);
router.post('/login', authController.login);

module.exports = router;

app.js:
const express = require('express');
const bodyParser = require('body-parser');
const { sequelize, initModels } = require('./models');
const authRoutes = require('./routes/authRoutes');
const courseRoutes = require('./routes/courseRoutes');
const discussionRoutes = require('./routes/discussionRoutes');

const app = express();
const port = 3000;

app.use(bodyParser.json());

app.use('/auth', authRoutes);
app.use('/courses', courseRoutes);
app.use('/discussions', discussionRoutes);

initModels().then(() => {
    app.listen(port, () => {
        console.log(`Server is running on http://localhost:${port}`);
    });
});







